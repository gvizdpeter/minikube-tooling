# Artifactory
artifactory:
  serviceAccount:
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: artifactory-service-account

  ingress:
    enabled: true
    hosts:
      - ${artifactory_hostname}
    routerPath: /
    artifactoryPath: /artifactory/
    annotations:
      kubernetes.io/ingress.class: ${ingress_class}
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_pass_header Server;
        proxy_set_header X-JFrog-Override-Base-Url ${http_protocol}://${artifactory_hostname};
        rewrite ^/(v1|v2)/token /artifactory/api/docker/null/$1/token;
        rewrite ^/(v1|v2)/(.*) /artifactory/api/docker/${artifactory_docker_virtual_repository_name}/$1/$2;

  postgresql:
    enabled: false

  database:
    type: postgresql
    driver: org.postgresql.Driver
    secrets:
      user:
        name: ${postgresql_artifactory_database_secret}
        key: ${postgresql_artifactory_database_username_key}
      password:
        name: ${postgresql_artifactory_database_secret}
        key: ${postgresql_artifactory_database_password_key}
      url:
        name: ${postgresql_artifactory_database_secret}
        key: ${postgresql_artifactory_database_url_key}

  artifactory:
    image:
      registry: releases-docker.jfrog.io
      repository: jfrog/artifactory-pro

    # Migration support from 6.x to 7.x
    migration:
      enabled: false

    waitForDatabase: false

    replicaCount: 1

    # Sidecar containers for tailing Artifactory logs
    loggers:
      - artifactory-request.log

    ## Alternatively, you can use a pre-existing secret with a key called master-key by specifying masterKeySecretName
    masterKeySecretName: ${artifactory_admin_secret}

    ## Alternatively, you can use a pre-existing secret with a key called join-key by specifying joinKeySecretName
    joinKeySecretName: ${artifactory_admin_secret}

    admin:
      secret: ${artifactory_admin_secret}
      dataKey: ${artifactory_admin_creds_secret_key}

    resources:
      requests:
        memory: "2Gi"
        cpu: "1"
      limits:
        memory: "4Gi"
        cpu: "2"
    javaOpts:
      xms: "2g"
      xmx: "4g"

    persistence:
      enabled: true
      mountPath: "/var/opt/jfrog/artifactory"
      accessMode: ReadWriteOnce
      size: 10Gi
      storageClassName: ${nfs_storage_class_name}

    extraEnvironmentVariables:
      - name: ADMIN_CREDS
        valueFrom:
          secretKeyRef:
            name: ${artifactory_admin_secret}
            key: ${artifactory_admin_creds_secret_key}

    configMaps: |
      accept-eula.sh: |
        #!/bin/bash

        RESULT=$(curl -s http://127.0.0.1:8082/router/api/v1/system/readiness)
        while [ "$RESULT" != "OK" ]; do
          sleep 10 && RESULT=$(curl -s http://127.0.0.1:8082/router/api/v1/system/readiness)
        done
        curl -X POST -vu $(echo "$ADMIN_CREDS" | sed 's/@\*=/:/g') http://127.0.0.1:8082/artifactory/ui/jcr/eula/accept

    customVolumeMounts: |
      - name: {{ template "artifactory.fullname" . }}-configmaps
        mountPath: /tmp/accept-eula.sh.ro
        subPath: accept-eula.sh

    postStartCommand: "cp /tmp/accept-eula.sh.ro /tmp/accept-eula.sh && chmod a+x /tmp/accept-eula.sh && /bin/bash /tmp/accept-eula.sh &"

    systemYaml: |
      router:
        topology:
          local:
            requiredServiceTypes: {{ include "router.requiredServiceTypes" . }}
        serviceRegistry:
          insecure: {{ .Values.router.serviceRegistry.insecure }}
      shared:
      {{- if  .Values.artifactory.openMetrics.enabled }}
        metrics:
          enabled: true
        {{- if .Values.artifactory.openMetrics.filebeat.enabled }}
          filebeat: {{ toYaml .Values.artifactory.openMetrics.filebeat | nindent 6 }}
        {{- end }}
      {{- end }}
        logging:
          consoleLog:
            enabled: {{ .Values.artifactory.consoleLog }}
        extraJavaOpts: >
          -Dartifactory.access.client.max.connections={{ .Values.access.tomcat.connector.maxThreads }}
        {{- with .Values.artifactory.javaOpts }}
          -Dartifactory.async.corePoolSize={{ .corePoolSize }}
        {{- if .xms }}
          -Xms{{ .xms }}
        {{- end }}
        {{- if .xmx }}
          -Xmx{{ .xmx }}
        {{- end }}
        {{- if .jmx.enabled }}
          -Dcom.sun.management.jmxremote
          -Dcom.sun.management.jmxremote.port={{ .jmx.port }}
          -Dcom.sun.management.jmxremote.rmi.port={{ .jmx.port }}
          -Dcom.sun.management.jmxremote.ssl={{ .jmx.ssl }}
        {{- if .jmx.host }}
          -Djava.rmi.server.hostname={{ tpl .jmx.host $ }}
        {{- else }}
          -Djava.rmi.server.hostname={{ template "artifactory.fullname" $ }}
        {{- end }}
        {{- if .jmx.authenticate }}
          -Dcom.sun.management.jmxremote.authenticate=true
          -Dcom.sun.management.jmxremote.access.file={{ .jmx.accessFile }}
          -Dcom.sun.management.jmxremote.password.file={{ .jmx.passwordFile }}
        {{- else }}
          -Dcom.sun.management.jmxremote.authenticate=false
        {{- end }}
        {{- end }}
        {{- if .other }}
          {{ .other }}
        {{- end }}
        {{- end }}
        {{- if or .Values.database.type .Values.postgresql.enabled }}
        database:
          {{- if .Values.postgresql.enabled }}
          type: postgresql
          url: "jdbc:postgresql://{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.postgresqlDatabase }}"
          driver: org.postgresql.Driver
          username: "{{ .Values.postgresql.postgresqlUsername }}"
          {{- else }}
          type: "{{ .Values.database.type }}"
          driver: "{{ .Values.database.driver }}"
          {{- end }}
        {{- end }}
      artifactory:
        database:
          maxOpenConnections: {{ .Values.artifactory.database.maxOpenConnections }}
        tomcat:
          connector:
            maxThreads: {{ .Values.artifactory.tomcat.connector.maxThreads }}
            sendReasonPhrase: {{ .Values.artifactory.tomcat.connector.sendReasonPhrase }}
            extraConfig: {{ .Values.artifactory.tomcat.connector.extraConfig }}
      frontend:
        session:
          timeMinutes: {{ .Values.frontend.session.timeoutMinutes | quote }}
      access:
        database:
          maxOpenConnections: {{ .Values.access.database.maxOpenConnections }}
        tomcat:
          connector:
            maxThreads: {{ .Values.access.tomcat.connector.maxThreads }}
            sendReasonPhrase: {{ .Values.access.tomcat.connector.sendReasonPhrase }}
            extraConfig: {{ .Values.access.tomcat.connector.extraConfig }}
      {{- if .Values.mc.enabled }}
      mc:
        enabled: true
        database:
          maxOpenConnections: {{ .Values.mc.database.maxOpenConnections }}
        idgenerator:
          maxOpenConnections: {{ .Values.mc.idgenerator.maxOpenConnections }}
        tomcat:
          connector:
            maxThreads: {{ .Values.mc.tomcat.connector.maxThreads }}
            sendReasonPhrase: {{ .Values.mc.tomcat.connector.sendReasonPhrase }}
            extraConfig: {{ .Values.mc.tomcat.connector.extraConfig }}
      {{- end }}
      metadata:
        database:
          maxOpenConnections: {{ .Values.metadata.database.maxOpenConnections }}
      {{- if .Values.artifactory.replicator.enabled }}
      replicator:
        enabled: true
      {{- end }}

    license:
      secret: ${artifactory_license_secret}
      dataKey: ${artifactory_license_secret_key}

  nginx:
    enabled: false
